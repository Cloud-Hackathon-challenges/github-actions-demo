name: Node.js CI, Terraform Deploy and Docker Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
        project: [frontend, api]
    defaults:
      run:
        working-directory: application/${{ matrix.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: application/${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "tests failed (not blocking)"

      - name: Run audit (show security warnings, but continue)
        run: npm audit || true

      - name: Simple lint check for API project
        if: matrix.project == 'api'
        run: |
          echo "Linting API: Kontrol ediliyor..."
          grep -rIn '[^;]$' . --include=*.js || echo "Semikolon-Kontrolle abgeschlossen"

  terraform-deploy-infra:
    name: Deploy Azure Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: test
    env:
      AZURE_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Create dev.tfvars from GitHub Secrets
        run: |
          cat <<EOF > dev.tfvars
          client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
          client_secret   = "${{ secrets.AZURE_CLIENT_SECRET }}"
          tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          EOF

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="dev.tfvars"
        continue-on-error: true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -var-file="dev.tfvars"

      - name: Set ACR Name as Output
        id: set-acr-name # This ID MUST match the one referenced in 'outputs'
        run: |
          # Get the raw output for acr_name from Terraform
          # Assuming 'terraform output -raw acr_name' gives just the base name (e.g., 'myregistry')
          ACR_NAME=$(terraform output -raw acr_name)

          # Optional: Strip any potential whitespace/newlines if Terraform output has them
          CLEAN_ACR_NAME=$(echo "$ACR_NAME" | tr -d '[:space:]')

          # Important: Add a check to ensure the output is not empty
          if [ -z "$CLEAN_ACR_NAME" ]; then
            echo "Error: Terraform output for 'acr_name' is empty. Cannot determine ACR name."
            exit 1
          fi

          # Set the cleaned ACR name as a job output variable
          echo "acr_name=$CLEAN_ACR_NAME" >> "$GITHUB_OUTPUT"
          echo "::debug::ACR name set to: $CLEAN_ACR_NAME" # Debugging output


      - name: Azure Logout
        run: az logout

    outputs:
      acr_name: ${{ steps.set-acr-name.outputs.acr_name }}

  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform-deploy-infra
    env:
      ACR_LOGIN_SERVER: ${{ needs.terraform-deploy-infra.outputs.acr_name }}.azurecr.io
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push frontend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./application/frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Build and Push api image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/api:latest ./application/api
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/api:latest

      - name: Build and Push db-seed image
        run: |
          if [ -d "./application/db-seed" ]; then
            docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/db-seed:latest ./application/db-seed
            docker push ${{ secrets.ACR_LOGIN_SERVER }}/db-seed:latest
          else
            echo "Verzeichnis ./application/db-seed existiert nicht. Ãœberspringe den Build des db-seed Images."
          fi
