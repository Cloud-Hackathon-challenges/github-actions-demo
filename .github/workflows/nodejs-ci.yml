name: Node.js CI, Terraform Deploy and Docker Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
        project: [frontend, api]
    defaults:
      run:
        working-directory: application/${{ matrix.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: application/${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "tests failed (not blocking)"

      - name: Run audit (show security warnings, but continue)
        run: npm audit || true

      - name: Simple lint check for API project
        if: matrix.project == 'api'
        run: |
          echo "Linting API: Kontrol ediliyor..."
          grep -rIn '[^;]$' . --include=*.js || echo "Semikolon-Kontrolle abgeschlossen"

  terraform-deploy-infra:
    name: Deploy Azure Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: test
    env:
      AZURE_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Create dev.tfvars from GitHub Secrets
        run: |
          echo "client_id       = \"${AZURE_CLIENT_ID}\""       > dev.tfvars
          echo "client_secret   = \"${AZURE_CLIENT_SECRET}\""   >> dev.tfvars
          echo "tenant_id       = \"${AZURE_TENANT_ID}\""       >> dev.tfvars
          echo "subscription_id = \"${AZURE_SUBSCRIPTION_ID}\"" >> dev.tfvars

      - name: Show Azure context (debug)
        run: |
          echo "== AZ Account =="
          az account show -o table
          echo "== Listing RGs (filter team1) =="
          az group list --query "[].{name:name, location:location}" -o table | grep -i team1 || true

      - name: Terraform Init
        run: terraform init -input=false -no-color

      - name: Terraform State Remove Existing RG (best effort)
        run: terraform state rm azurerm_resource_group.rg-registry || true

      - name: Conditional Import RG if exists
        shell: bash
        run: |
          set -e
          RG_NAME="team1-rg-manual9"
          SUBS="${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          echo "Checking if resource group '$RG_NAME' exists in subscription $SUBS ..."
          if az group show -n "$RG_NAME" --subscription "$SUBS" >/dev/null 2>&1; then
            echo "RG exists. Importing into Terraform state..."
            terraform import \
              -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
              -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
              -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
              -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              azurerm_resource_group.rg-registry \
              "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${RG_NAME}"
          else
            echo "RG not found. Skipping import; Terraform will create it on apply."
          fi

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="dev.tfvars"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false -var-file="dev.tfvars"

      - name: Azure Logout
        run: az logout

    outputs:
      acr_name: ${{ steps.terraform_apply.outputs.acr_name || 'team1acrmanual9' }}

  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform-deploy-infra
    env:
      ACR_LOGIN_SERVER: team1acrmanual6.azurecr.io
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push frontend image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./application/frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Build and Push api image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/api:latest ./application/api
          docker push ${{ env.ACR_LOGIN_SERVER }}/api:latest

      - name: Build and Push db-seed image
        run: |
          if [ -d "./application/db-seed" ]; then
            docker build -t ${{ env.ACR_LOGIN_SERVER }}/db-seed:latest ./application/db-seed
            docker push ${{ env.ACR_LOGIN_SERVER }}/db-seed:latest
          else
            echo "Verzeichnis ./application/db-seed existiert nicht. Ãœberspringe den Build des db-seed Images."
          fi

  appservice-deploy:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy with docker-compose
        run: |
          az webapp create \
            --resource-group ${{ secrets.AZURE_RG }} \
            --plan ${{ secrets.APP_SERVICE_PLAN }} \
            --name ${{ secrets.APP_NAME }} \
            --multicontainer-config-type compose \
            --multicontainer-config-file application/docker-compose.webapp.yml

      - name: Configure ACR access
        run: |
          az webapp config container set \
            --name ${{ secrets.APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RG }} \
            --docker-registry-server-url https://${{ secrets.ACR_NAME }}.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

  appservice-configure:
    name: Configure App Service Container Registry Access and Restart
    runs-on: ubuntu-latest
    needs: appservice-deploy
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure App Service container registry access
        run: |
          az webapp config container set \
            --name ${{ secrets.APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RG }} \
            --docker-registry-server-url https://team1acrmanual6.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

      - name: Restart Azure Web App
        run: |
          az webapp restart --name ${{ secrets.APP_NAME }} --resource-group ${{ secrets.AZURE_RG }}

  cypress-e2e:
    name: Run Cypress E2E Tests
    runs-on: ubuntu-latest
    needs: appservice-configure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci
        working-directory: test

      - name: Run Cypress tests
        run: n