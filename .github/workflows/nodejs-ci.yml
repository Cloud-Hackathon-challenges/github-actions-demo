name: Node.js CI, Terraform Deploy and Docker Build (MI-only ACR)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
        project: [frontend, api]
    defaults:
      run:
        working-directory: application/${{ matrix.project }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: application/${{ matrix.project }}/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Run tests (non-blocking)
        run: npm test || echo "tests failed (not blocking)"

      - name: Security audit (non-blocking)
        run: npm audit || true

      - name: Simple lint check for API project
        if: matrix.project == 'api'
        run: |
          echo "Linting API..."
          grep -rIn '[^;]$' . --include=*.js || echo "Lint check done"

  terraform-deploy-infra:
    name: Deploy Azure Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      rg_name:            ${{ steps.tf_out.outputs.rg_name }}
      asp_name:           ${{ steps.tf_out.outputs.asp_name }}
      app_name:           ${{ steps.tf_out.outputs.app_name }}
      acr_name:           ${{ steps.tf_out.outputs.acr_name }}
      acr_login_server:   ${{ steps.tf_out.outputs.acr_login_server }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Create dev.tfvars from GitHub Secrets
        run: |
          cat <<EOF > dev.tfvars
          client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
          client_secret   = "${{ secrets.AZURE_CLIENT_SECRET }}"
          tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          EOF

      - name: Terraform Init
        run: terraform init -input=false -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="dev.tfvars"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false -var-file="dev.tfvars"

      - name: Export Terraform outputs for next jobs
        id: tf_out
        shell: bash
        run: |
          get() { terraform output -raw "$1" 2>/dev/null | head -n1 | tr -d '\r'; }
          echo "rg_name=$(get resource_group_name)"       >> "$GITHUB_OUTPUT"
          echo "asp_name=$(get app_service_plan)"         >> "$GITHUB_OUTPUT"
          echo "app_name=$(get app_service_name)"         >> "$GITHUB_OUTPUT"
          echo "acr_name=$(get acr_name)"                 >> "$GITHUB_OUTPUT"
          echo "acr_login_server=$(get acr_login_server)" >> "$GITHUB_OUTPUT"

      - name: Ensure Web App MI is enabled (idempotent)
        run: |
          az webapp identity assign \
            -g "${{ steps.tf_out.outputs.resource_group_name }}" \
            -n "${{ steps.tf_out.outputs.app_service_name }}" || true

  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform-deploy-infra
    env:
      ACR_NAME:         ${{ needs.terraform-deploy-infra.outputs.acr_name }}
      ACR_LOGIN_SERVER: ${{ needs.terraform-deploy-infra.outputs.acr_login_server }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login (no secrets)
        run: az acr login -n "$ACR_NAME"

      - name: Build and Push frontend image
        run: |
          docker build --platform linux/amd64 -t $ACR_LOGIN_SERVER/frontend:latest ./application/frontend
          docker push $ACR_LOGIN_SERVER/frontend:latest

      - name: Build and Push api image
        run: |
          docker build --platform linux/amd64 -t $ACR_LOGIN_SERVER/api:latest ./application/api
          docker push $ACR_LOGIN_SERVER/api:latest

      - name: Build and Push db-seed image (if exists)
        run: |
          if [ -d "./application/db-seed" ]; then
            docker build --platform linux/amd64 -t $ACR_LOGIN_SERVER/db-seed:latest ./application/db-seed
            docker push $ACR_LOGIN_SERVER/db-seed:latest
          else
            echo "db-seed directory not found, skipping."
          fi

  appservice-deploy:
    name: Configure Web App to pull via Managed Identity
    runs-on: ubuntu-latest
    needs: [ docker-build-push, terraform-deploy-infra ]
    env:
      RG_NAME:          ${{ needs.terraform-deploy-infra.outputs.rg_name }}
      ASP_NAME:         ${{ needs.terraform-deploy-infra.outputs.asp_name }}
      APP_NAME:         ${{ needs.terraform-deploy-infra.outputs.app_name }}
      ACR_NAME:         ${{ needs.terraform-deploy-infra.outputs.acr_name }}
      ACR_LOGIN_SERVER: ${{ needs.terraform-deploy-infra.outputs.acr_login_server }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # (İsteğe bağlı) Web App yoksa oluştur. Varsa no-op olur.
      - name: Create / Update Web App (multi-container)
        run: |
          az webapp create \
            --resource-group "$RG_NAME" \
            --plan "$ASP_NAME" \
            --name "$APP_NAME" \
            --multicontainer-config-type compose \
            --multicontainer-config-file application/docker-compose.webapp.yml || true

      # MI'ye AcrPull ver (her koşuda idempotent)
      - name: Grant AcrPull to Web App Managed Identity
        run: |
          PRINCIPAL_ID=$(az webapp identity show -g "$RG_NAME" -n "$APP_NAME" --query principalId -o tsv)
          ACR_ID=$(az acr show -n "$ACR_NAME" --query id -o tsv)
          # Aynı atama varsa hata vermez/tekrar yapar, sorun değil
          az role assignment create --assignee "$PRINCIPAL_ID" --role AcrPull --scope "$ACR_ID" || true

      # Compose + MI ile ACR pull’u etkinleştir
      - name: Apply Docker Compose (MI-based pull)
        run: |
          az webapp config container set \
            --resource-group "$RG_NAME" \
            --name "$APP_NAME" \
            --multicontainer-config-type compose \
            --multicontainer-config-file application/docker-compose.webapp.yml \
            --enable-acr-use-identity true \
            --registry-login-server "$ACR_LOGIN_SERVER"

      # Eski user/pass varsa temizle (idempotent)
      - name: Remove legacy registry credentials (cleanup)
        run: |
          az webapp config container set \
            --resource-group "$RG_NAME" \
            --name "$APP_NAME" \
            --docker-registry-server-url "" \
            --docker-registry-server-user "" \
            --docker-registry-server-password "" || true

      - name: Ensure app settings
        run: |
          az webapp config appsettings set -g "$RG_NAME" -n "$APP_NAME" \
            --settings WEBSITES_ENABLE_APP_SERVICE_STORAGE=true WEBSITES_CONTAINER_START_TIME_LIMIT=600

  appservice-restart:
    name: Restart Web App
    runs-on: ubuntu-latest
    needs: appservice-deploy
    env:
      RG_NAME:  ${{ needs.terraform-deploy-infra.outputs.rg_name }}
      APP_NAME: ${{ needs.terraform-deploy-infra.outputs.app_name }}
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Restart Azure Web App
        run: az webapp restart
