name: Node.js CI, Terraform Deploy and Docker Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
        project: [frontend, api]
    defaults:
      run:
        working-directory: application/${{ matrix.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: application/${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests (non-blocking)
        run: npm test || echo "tests failed (not blocking)"

      - name: Security audit (non-blocking)
        run: npm audit || true

      - name: Simple lint check for API project
        if: matrix.project == 'api'
        run: |
          echo "Linting API..."
          grep -rIn '[^;]$' . --include=*.js || echo "Lint check done"

  terraform-deploy-infra:
    name: Deploy Azure Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: test
    env:
      AZURE_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      rg_name:            ${{ steps.tf_out.outputs.rg_name }}
      asp_name:           ${{ steps.tf_out.outputs.asp_name }}
      app_name:           ${{ steps.tf_out.outputs.app_name }}
      acr_name:           ${{ steps.tf_out.outputs.acr_name }}
      acr_login_server:   ${{ steps.tf_out.outputs.acr_login_server }}
      acr_username:       ${{ steps.tf_out.outputs.acr_username }}
      acr_password:       ${{ steps.tf_out.outputs.acr_password }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Create dev.tfvars from GitHub Secrets
        run: |
          cat <<EOF > dev.tfvars
          client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
          client_secret   = "${{ secrets.AZURE_CLIENT_SECRET }}"
          tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          EOF

      - name: Terraform Init
        run: terraform init -input=false -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="dev.tfvars"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false -var-file="dev.tfvars"

      - name: Export Terraform outputs for next jobs
        id: tf_out
        shell: bash
        run: |
          get() { terraform output -raw "$1" 2>/dev/null | head -n1 | tr -d '\r'; }
          echo "rg_name=$(get resource_group_name)"       >> "$GITHUB_OUTPUT"
          echo "asp_name=$(get app_service_plan)"         >> "$GITHUB_OUTPUT"
          echo "app_name=$(get app_service_name)"         >> "$GITHUB_OUTPUT"
          echo "acr_name=$(get acr_name)"                 >> "$GITHUB_OUTPUT"
          echo "acr_login_server=$(get acr_login_server)" >> "$GITHUB_OUTPUT"
          echo "acr_username=$(get acr_admin_username)"   >> "$GITHUB_OUTPUT"
          echo "acr_password=$(get acr_admin_password)"   >> "$GITHUB_OUTPUT"

      - name: Azure Logout
        run: az logout

  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform-deploy-infra
    env:
      ACR_NAME:         ${{ needs.terraform-deploy-infra.outputs.acr_name }}
      ACR_LOGIN_SERVER: ${{ needs.terraform-deploy-infra.outputs.acr_login_server }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login (no admin user)
        run: az acr login -n "$ACR_NAME"

      - name: Build and Push frontend image
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:latest ./application/frontend
          docker push $ACR_LOGIN_SERVER/frontend:latest

      - name: Build and Push api image
        run: |
          docker build -t $ACR_LOGIN_SERVER/api:latest ./application/api
          docker push $ACR_LOGIN_SERVER/api:latest

      - name: Build and Push db-seed image (webapp tag)
        run: |
          if [ -d "./application/db-seed" ]; then
            docker build -t $ACR_LOGIN_SERVER/db-seed:webapp ./application/db-seed
            docker push $ACR_LOGIN_SERVER/db-seed:webapp
          else
            echo "db-seed directory not found, skipping."
          fi

  appservice-deploy:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: [ docker-build-push, terraform-deploy-infra ]
    env:
      RG_NAME:          ${{ needs.terraform-deploy-infra.outputs.rg_name }}
      ASP_NAME:         ${{ needs.terraform-deploy-infra.outputs.asp_name }}
      APP_NAME:         ${{ needs.terraform-deploy-infra.outputs.app_name }}
      ACR_LOGIN_SERVER: ${{ needs.terraform-deploy-infra.outputs.acr_login_server }}
      ACR_NAME:         ${{ needs.terraform-deploy-infra.outputs.acr_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create / Update Web App (multi-container)
        run: |
          az webapp create \
            --resource-group "$RG_NAME" \
            --plan "$ASP_NAME" \
            --name "$APP_NAME" \
            --multicontainer-config-type compose \
            --multicontainer-config-file application/docker-compose.webapp.yml || true

      - name: Configure ACR credentials on Web App
        run: |
          USER="${{ needs.terraform-deploy-infra.outputs.acr_username }}"
          PASS="${{ needs.terraform-deploy-infra.outputs.acr_password }}"
          az webapp config container set \
            --name "$APP_NAME" \
            --resource-group "$RG_NAME" \
            --docker-registry-server-url "https://${ACR_LOGIN_SERVER}" \
            --docker-registry-server-user "$USER" \
            --docker-registry-server-password "$PASS"

      - name: Set App Settings (WEBSITES_PORT=80)
        run: |
          az webapp config appsettings set \
            --resource-group "$RG_NAME" \
            --name "$APP_NAME" \
            --settings WEBSITES_PORT=80 WEBSITES_CONTAINER_START_TIME_LIMIT=1800

  appservice-configure:
    name: Restart Web App
    runs-on: ubuntu-latest
    needs: [ appservice-deploy, terraform-deploy-infra ]
    env:
      RG_NAME:  ${{ needs.terraform-deploy-infra.outputs.rg_name }}
      APP_NAME: ${{ needs.terraform-deploy-infra.outputs.app_name }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Restart Azure Web App
        run: az webapp restart --name "$APP_NAME" --resource-group "$RG_NAME"

  cypress-e2e:
    name: Run Cypress E2E Tests
    runs-on: ubuntu-latest
    needs: [ appservice-configure, terraform-deploy-infra ]
    env:
      APP_NAME: ${{ needs.terraform-deploy-infra.outputs.app_name }}
      CYPRESS_BASE_URL: "https://${{ needs.terraform-deploy-infra.outputs.app_name }}.azurewebsites.net"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci
        working-directory: test

      - name: Show resolved app URL
        run: echo "CYPRESS_BASE_URL=$CYPRESS_BASE_URL"

      - name: Wait until app is up (max ~5 min)
        run: |
          for i in {1..60}; do
            if curl -fsS --max-time 5 "$CYPRESS_BASE_URL" >/dev/null; then
              echo "App is up"; exit 0
            fi
            sleep 5
          done
          echo "App did not come up in time"; exit 1

      - name: Run Cypress tests
        run: npx cypress run
        working-directory: test
        env:
          TERM: xterm-256color


     
  

  # cypress-e2e:
  #   name: Run Cypress E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: appservice-configure
  #   env:
  #     APP_NAME: ${{ needs.terraform-deploy-infra.outputs.app_name }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20

  #     - name: Install dependencies
  #       run: npm ci
  #       working-directory: test

  #     - name: Run Cypress tests
  #       run: npx cypress run
  #       working-directory: test
  #       env:
  #         CYPRESS_BASE_URL: https://${{ env.APP_NAME }}.azurewebsites.net
  #         TERM: xterm-256color
